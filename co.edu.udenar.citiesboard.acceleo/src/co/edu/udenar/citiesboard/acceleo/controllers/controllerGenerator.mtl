[comment encoding = UTF-8 /]
[module controllerGenerator('http://citiesboard.sistemas.udenar.edu.co/mvc')]
[template public generateElement(aMvcApplication : MvcApplication)]
[comment @main/]
-------------------------------------- DATABASE ---------------------------------------------------

[for (m:Model | aMvcApplication.controllers.model)]
[if(m.type= 'persisted')]
[for(modelo: DataBase | m)]
[if(modelo.controller.view.type='pie' or modelo.controller.view.type='bar')]
[for(visual:GraphicComponent | modelo.controller.view)]

[file (modelo.nameclass+'sController.cs', false, 'UTF-8')]
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.Mvc;

namespace [aMvcApplication.name/].Controllers
{
	public class [modelo.nameclass/]sController : Controller
    {  
	private AppDbContext db = new AppDbContext();
	public ActionResult Index()
        {
            return View();
        }	
	
		['['/]HttpPost[']'/]
		 public JsonResult [modelo.nameclass/]()
        {
            List<object> iData = new List<object>();
            DataTable dt = new DataTable();
			DataRow dr;
			[if (visual.datoA.typeattribute = 'string')]
            dt.Columns.Add("[visual.datoA.nameattribute/]", System.Type.GetType("System.String"));
			[elseif (visual.datoA.typeattribute= 'chart')]
            dt.Columns.Add("[visual.datoA.nameattribute/]", System.Type.GetType("System.Chart"));
			[/if]
			[if (visual.datoB.typeattribute='int')]
            dt.Columns.Add("[visual.datoB.nameattribute/]", System.Type.GetType("System.Int32"));
			[elseif (visual.datoB.typeattribute='float')]
            dt.Columns.Add("[visual.datoB.nameattribute/]", System.Type.GetType("System.Single"));
			[/if]

			foreach (var item in db.[modelo.nameclass/]) {
                dr = dt.NewRow();
                dr['['/]"[visual.datoA.nameattribute/]"[']'/] = item.[visual.datoA.nameattribute/];
                dr['['/]"[visual.datoB.nameattribute/]"[']'/] = item.[visual.datoB.nameattribute/];
                dt.Rows.Add(dr);
            }
			foreach (DataColumn dc in dt.Columns)
            {
                List<object> x = new List<object>();
                x = (from DataRow drr in dt.Rows select drr['['/]dc.ColumnName[']'/]).ToList();
                iData.Add(x);
            } 
            return Json(iData, JsonRequestBehavior.AllowGet);
        }
	}
}
[/file]
[/for]

[elseif(modelo.controller.view.type= 'map')]
[for(visualm : MapComponent | modelo.controller.view)]
[file(modelo.nameclass+'sController.cs', false, 'UTF-8')]
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.Mvc;

namespace [aMvcApplication.name/].Controllers
{
	public class [modelo.nameclass/]sController : Controller
	{	
		private AppDbContext db = new AppDbContext();
		public ActionResult Index()
        {       
        object['['/][']'/] data = this.BarChartValues();
        string vbData = "";
            for (int i = 0; i<data.Length; i++)
            {
                vbData = vbData + data['['/]i[']'/];                
            }
            ViewBag.Data = vbData;
            return View();
        }

		public object['['/][']'/] BarChartValues()
        {
            int size = db.[modelo.nameclass/].Count();
            object['['/][']'/] dat = new object['['/]size[']'/];
            int i = 0;
            string lat, lon;
            foreach (var item in db.[modelo.nameclass/])
            {
				lon= @item.markerlongitude.ToString().Replace(",",".");
            	lat = @item.markerlatitude.ToString().Replace(",", ".");
            	dat['['/]i[']'/] = "L.marker(['['/]" + lon + "," + lat+ "[']'/]).addTo(map).bindPopup(" + "`"+@item.markermessage+"`" + ").openPopup(); \n";
            	i++;
        	}
         return dat;
      	}
		
	}
}
[/file]
[/for]
[/if]

[/for]

------------------------------------------- CLIENT --------------------------------------------------
[elseif(m.type = 'streamed')]
[for(modelo: Client | m)]
[if(modelo.controller.view.type='pie' or modelo.controller.view.type='bar')]
[for(visual:GraphicComponent | modelo.controller.view)]
[file (modelo.nameclass+'sController.cs', false, 'UTF-8')]

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Web.Mvc;
using Newtonsoft.Json;
using System.Net.Http;
using static [aMvcApplication.name/].Models.[modelo.nameclass/];

namespace [aMvcApplication.name/].Controllers
{
	public class [modelo.nameclass/]sController : Controller
    {  
	public ActionResult Index()
        {
            return View();
        }
		
		['['/]HttpPost[']'/]
		 public JsonResult [modelo.nameclass/]()
        {
            List<object> iData = new List<object>();
            DataTable dt = new DataTable();
			DataRow dr;
			[if (visual.datoA.typeattribute = 'string')]
            dt.Columns.Add("[visual.datoA.nameattribute/]", System.Type.GetType("System.String"));
			[elseif (visual.datoA.typeattribute= 'chart')]
            dt.Columns.Add("[visual.datoA.nameattribute/]", System.Type.GetType("System.Chart"));
			[/if]
			[if (visual.datoB.typeattribute='int')]
            dt.Columns.Add("[visual.datoB.nameattribute/]", System.Type.GetType("System.Int32"));
			[elseif (visual.datoB.typeattribute='float')]
            dt.Columns.Add("[visual.datoB.nameattribute/]", System.Type.GetType("System.Single"));
			[/if]			
			
			HttpClient clientweb = new HttpClient();
            clientweb.BaseAddress = new Uri("[modelo.nameservice/]");
            var request = clientweb.GetAsync("").Result;
            if (request.IsSuccessStatusCode)
            {
               string resultstring = request.Content.ReadAsStringAsync().Result;                
               List<[modelo.method.namemethod/]> listado = JsonConvert.DeserializeObject<List<[modelo.method.namemethod/]>>(resultstring); 
               foreach (var item in listado)
                {
                dr = dt.NewRow();
                dr['['/]"[visual.datoA.nameattribute/]"[']'/] = item.[visual.datoA.nameattribute/];
                dr['['/]"[visual.datoB.nameattribute/]"[']'/] = item.[visual.datoB.nameattribute/];
                dt.Rows.Add(dr);
                }
            }
			foreach (DataColumn dc in dt.Columns)
            {
                List<object> x = new List<object>();
                x = (from DataRow drr in dt.Rows select drr['['/]dc.ColumnName[']'/]).ToList();
                iData.Add(x);
            } 
            return Json(iData, JsonRequestBehavior.AllowGet);
        }
	}
}
[/file]
[/for]

[elseif(modelo.controller.view.type='map')]
[for(visualm : MapComponent | modelo.controller.view)]
[file (modelo.nameclass+'sController.cs', false, 'UTF-8')]
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Web.Mvc;
using Newtonsoft.Json;
using System.Net.Http;
using static [aMvcApplication.name/].Models.[modelo.nameclass/];

namespace [aMvcApplication.name/].Controllers
{
	public class [modelo.nameclass/]sController : Controller
	{	
        
		public ActionResult Index()
        {       
        object['['/][']'/] data = this.BarChartValues();
        string vbData = "";
            for (int i = 0; i<data.Length; i++)
            {
                vbData = vbData + data['['/]i[']'/];                
            }
            ViewBag.Data = vbData;
            return View();
        }
		public object['['/][']'/] BarChartValues()
        {
			HttpClient clienteweb = new HttpClient();
        	clienteweb.BaseAddress = new Uri("[modelo.nameservice/]");       
        	var request = clienteweb.GetAsync("").Result;
        	string resultstring = request.Content.ReadAsStringAsync().Result;
        	List<[modelo.method.namemethod/]> listado = JsonConvert.DeserializeObject<List<[modelo.method.namemethod/]>>(resultstring); 
        	int size = listado.Count();
        	object['['/][']'/] dat = new object ['['/]size[']'/];
        	int i = 0;
       	 	string lat, lon;
       		foreach (var item in listado)
        	{
				lon= @item.markerlongitude.ToString().Replace(",",".");
            	lat = @item.markerlatitude.ToString().Replace(",", ".");
            	dat['['/]i[']'/] = "L.marker(['['/]" + lon + "," + lat+ "[']'/]).addTo(map).bindPopup(" + "`"+@item.markermessage+"`" + ").openPopup(); \n";
            	i++;
        	}
         return dat;
      	}
		
	}
}
[/file]
[/for]
[/if]

[/for]
[/if]
[/for]

----------------------------------------------------- SOCIAL NETWORK ----------------------------------------------------

[for(vistas : View | aMvcApplication.controllers.view)]
[if(vistas.type = 'twitter' or vistas.type ='facebook' or vistas.type ='youtube') ]
[for(visuals : SocialComponent | vistas)]

[file (visuals.controller.model.nameclass+'sController.cs', false, 'UTF-8')]
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.Mvc;
		
namespace [aMvcApplication.name/].Controllers
{			
	public class [visuals.name/]sController : Controller
   	{  
		public ActionResult Index()
        {
            return View();
        }
	}
} 
[/file]
[/for]
[/if]
[/for]
[/template]