-- @path cdb=/co.edu.udenar.citiesboard.design/metamodels/cdb.ecore
-- @path mvc=/co.edu.udenar.citiesboard.design/metamodels/mvc.ecore

module CdbToMvc;
create OUT : mvc from IN : cdb;

---------  Main  ----------------------
--1
rule Dashboard2Mvcapplication 
{
	from 
		db: cdb!Dashboard 
	to 
		mv: mvc!MvcApplication
	(
		name <- db.name.regexReplaceAll(' ', '_'),
		picture <- db.picture,
		email <- db.email,
		description <- db.description,
		pagelink <- db.pagelink,
		views <-db.visualisator,
		models <- db.datasource,
		controllers <-db.visualisator
	)
}
---------- Visualisator --------------------
--2
rule Piechart2ControllerAndGraphicComponent
{
	from	
		pc: cdb!PieChart
	to 
		con: mvc!Controller
		(
			name <- pc.name,
			model <-pc.presents
		),
		p: mvc!GraphicComponent
		(	
			type <- 'pie', 
			name <- pc.name,
			datoA <- pc.label, 
			datoB <-pc.data,
			position <- pc.position,
			controller <- con
		)
		
}
--3
rule Barchart2ControllerAndGraphicComponent
{
	from	
		bc: cdb!BarChart		
	to 
		con: mvc!Controller
		(
			name <- bc.name,
			model <-bc.presents
		),		
		b: mvc!GraphicComponent
		(   name <- bc.name, 
			type <- 'bar',
			datoA <- bc.label,
			datoB <-bc.data,
			controller <- con,
			position <- bc.position
		)		
}

--4
rule Twitter2ControllerAndSocialComponent
{
	from	
		tw: cdb!Twitter	
	to 
		con: mvc!Controller
		(
			name <- tw.name,
			model <-tw.presents
		),	
		p: mvc!SocialComponent
		(	
			name <- tw.name,
			type <- 'twitter',
			controller <- con,
			position <- tw.position,
			socialname <- tw.listname,
			social <- tw.accountuser
		)		
}

--5
rule Facebook2ControllerAndSocialComponent
{
	from	
		fk: cdb!Facebook	
	to 
		con: mvc!Controller
		(
			name <- fk.name,
			model <-fk.presents
		),	
		p: mvc!SocialComponent
		(	
			name <- fk.name,
			type <- 'facebook',
			controller <- con,
			position <- fk.position,
			socialname <- fk.tittlepage,
			social <- fk.namepage
		)		
}

--6
rule Youtube2ControllerAndSocialComponent
{
	from	
		yt: cdb!Youtube	
	to 
		con: mvc!Controller
		(
			name <- yt.name,
			model <-yt.presents
		),	
		p: mvc!SocialComponent
		(	
			name <- yt.name,
			type <- 'youtube',
			controller <- con,
			position <- yt.position,
			socialname <- yt.channelname,
			social <- yt.urlList
		)		
}

--7
rule Map2ControllerAndMapComponent{
	from	
		mv: cdb!Mapc		
	to 
		con: mvc!Controller
		(
			name <- mv.name,
			model <-mv.presents
		),
		mm: mvc!MapComponent
		(
			name <- mv.name,
			type <- 'map', 
			latitude <-  mv.latitude, 
			longitude <- mv.longitude,
			controller <- con,
			marker <- mv.marker,
			position <- mv.position			
			
		)
}

---------  Datasource  ------------------------------
--8
rule Persisted2DataBase
{
	from
		p: cdb!Persisted
	to
		m: mvc!DataBase
		(
		type <- 'persisted',
		nameclass <- p.name, 
		attribute<- p.dataentitty
		)
		
}
--9

rule Streamed2Client
{
	from
		s: cdb!Streamed
	to
		m: mvc!Client
		(
		type <- 'streamed',
		nameclass <- s.name, 
		method <- s.method, 
		nameservice <- s.URL_service
		)
}

-- 10
rule method2method
{ 
	from 
		m: cdb!Method
	to
		mm: mvc!Method
		(
			namemethod <- m.name,
			type <- m.type,
			attrib <-m.dataentitty
		)
}

-- 11
rule Datatype2Attribute
{
	from 
		dt: cdb!DataEntity
	to 
		att: mvc!Attribute
		(
			nameattribute<- dt.name,
			typeattribute <-dt.type
		)
}
------------- Position ------------
--11

rule Postion2Position
{
	from 
		c: cdb!Position 
	to 
		p: mvc!Position
		(
			name <- c.name,
			above <- c.top,
			align_left <- c.left,
			wide <- c.width,
			long <- c.heigth			
		)
}