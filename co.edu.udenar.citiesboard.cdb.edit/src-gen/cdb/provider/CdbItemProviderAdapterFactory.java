/**
 */
package cdb.provider;

import cdb.util.CdbAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CdbItemProviderAdapterFactory extends CdbAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CdbItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Dashboard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DashboardItemProvider dashboardItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Dashboard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDashboardAdapter() {
		if (dashboardItemProvider == null) {
			dashboardItemProvider = new DashboardItemProvider(this);
		}

		return dashboardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Visualisator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisualisatorItemProvider visualisatorItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Visualisator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisualisatorAdapter() {
		if (visualisatorItemProvider == null) {
			visualisatorItemProvider = new VisualisatorItemProvider(this);
		}

		return visualisatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.DataSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSourceItemProvider dataSourceItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.DataSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSourceAdapter() {
		if (dataSourceItemProvider == null) {
			dataSourceItemProvider = new DataSourceItemProvider(this);
		}

		return dataSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Chart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChartItemProvider chartItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Chart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChartAdapter() {
		if (chartItemProvider == null) {
			chartItemProvider = new ChartItemProvider(this);
		}

		return chartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Facebook} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacebookItemProvider facebookItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Facebook}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacebookAdapter() {
		if (facebookItemProvider == null) {
			facebookItemProvider = new FacebookItemProvider(this);
		}

		return facebookItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Twitter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TwitterItemProvider twitterItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Twitter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTwitterAdapter() {
		if (twitterItemProvider == null) {
			twitterItemProvider = new TwitterItemProvider(this);
		}

		return twitterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Youtube} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected YoutubeItemProvider youtubeItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Youtube}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createYoutubeAdapter() {
		if (youtubeItemProvider == null) {
			youtubeItemProvider = new YoutubeItemProvider(this);
		}

		return youtubeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.SocialMedia} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SocialMediaItemProvider socialMediaItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.SocialMedia}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSocialMediaAdapter() {
		if (socialMediaItemProvider == null) {
			socialMediaItemProvider = new SocialMediaItemProvider(this);
		}

		return socialMediaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.PieChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PieChartItemProvider pieChartItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.PieChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPieChartAdapter() {
		if (pieChartItemProvider == null) {
			pieChartItemProvider = new PieChartItemProvider(this);
		}

		return pieChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.BarChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BarChartItemProvider barChartItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.BarChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBarChartAdapter() {
		if (barChartItemProvider == null) {
			barChartItemProvider = new BarChartItemProvider(this);
		}

		return barChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.DataEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataEntityItemProvider dataEntityItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.DataEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataEntityAdapter() {
		if (dataEntityItemProvider == null) {
			dataEntityItemProvider = new DataEntityItemProvider(this);
		}

		return dataEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Streamed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StreamedItemProvider streamedItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Streamed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStreamedAdapter() {
		if (streamedItemProvider == null) {
			streamedItemProvider = new StreamedItemProvider(this);
		}

		return streamedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Persisted} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersistedItemProvider persistedItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Persisted}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersistedAdapter() {
		if (persistedItemProvider == null) {
			persistedItemProvider = new PersistedItemProvider(this);
		}

		return persistedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Method} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodItemProvider methodItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Method}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodAdapter() {
		if (methodItemProvider == null) {
			methodItemProvider = new MethodItemProvider(this);
		}

		return methodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Position} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositionItemProvider positionItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Position}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositionAdapter() {
		if (positionItemProvider == null) {
			positionItemProvider = new PositionItemProvider(this);
		}

		return positionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cdb.Mapc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapcItemProvider mapcItemProvider;

	/**
	 * This creates an adapter for a {@link cdb.Mapc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapcAdapter() {
		if (mapcItemProvider == null) {
			mapcItemProvider = new MapcItemProvider(this);
		}

		return mapcItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (dashboardItemProvider != null)
			dashboardItemProvider.dispose();
		if (visualisatorItemProvider != null)
			visualisatorItemProvider.dispose();
		if (dataSourceItemProvider != null)
			dataSourceItemProvider.dispose();
		if (chartItemProvider != null)
			chartItemProvider.dispose();
		if (facebookItemProvider != null)
			facebookItemProvider.dispose();
		if (twitterItemProvider != null)
			twitterItemProvider.dispose();
		if (youtubeItemProvider != null)
			youtubeItemProvider.dispose();
		if (socialMediaItemProvider != null)
			socialMediaItemProvider.dispose();
		if (pieChartItemProvider != null)
			pieChartItemProvider.dispose();
		if (barChartItemProvider != null)
			barChartItemProvider.dispose();
		if (dataEntityItemProvider != null)
			dataEntityItemProvider.dispose();
		if (streamedItemProvider != null)
			streamedItemProvider.dispose();
		if (persistedItemProvider != null)
			persistedItemProvider.dispose();
		if (methodItemProvider != null)
			methodItemProvider.dispose();
		if (positionItemProvider != null)
			positionItemProvider.dispose();
		if (mapcItemProvider != null)
			mapcItemProvider.dispose();
	}

}
